#! /usr/bin/env python3

import numpy as np

shift = 24
bits = 64
fxpMax = 2 ** (bits - shift - 1) - 2 ** shift

functions = [
  (
    # Sigmoid error target 3x2^-12
    'Sigmoid',
    [32.0, 16.0, 8.0, 6.0, 4.0, 3.0, 2.0, 1.0, 0.5],
    [-24.0, -12.0, -7.0, -5.0, -3.5, -2.5, -1.5, -0.75, -0.25],
    [
      [0.0, -6.4373016357421875e-06, -0.00047719478607177734, -0.00343245267868042, -0.013502359390258789, -0.029790282249450684, -0.0468977689743042, -0.03884589672088623, -0.01521080732345581],
      [0.0, 2.193450927734375e-05, 0.0010034441947937012, 0.007302463054656982, 0.02904421091079712, 0.07111233472824097, 0.14951616525650024, 0.21747684478759766, 0.24540317058563232],
      [1.0, 0.9999938607215881, 0.9990889430046082, 0.9933071732521057, 0.970687747001648, 0.9241418242454529, 0.8175745010375977, 0.6791787147521973, 0.562176525592804],
    ]
  ),
  (
    # Tanh error target 4x2^-12
    'Tanh',
    [16.0, 8.0, 4.0, 3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.25],
    [-12.0, -6.0, -3.5, -2.75, -2.25, -1.75, -1.25, -0.75, -0.375, -0.125],
    [
      [0.0, -5.173683166503906e-05, -0.003817439079284668, -0.016274333000183105, -0.04297292232513428, -0.10801905393600464, -0.23832207918167114, -0.3751820921897888, -0.31076717376708984, -0.12168645858764648],
      [0.0, 8.767843246459961e-05, 0.004013776779174805, 0.016612470149993896, 0.044486284255981445, 0.11617672443389893, 0.2844492793083191, 0.5980647206306458, 0.8699072599411011, 0.9816125631332397],
      [1.0, 0.9999877214431763, 0.9981778860092163, 0.9918597340583801, 0.9780260920524597, 0.9413755536079407, 0.8482836484909058, 0.6351489424705505, 0.35835736989974976, 0.12435299158096313],
    ]
  ),
  (
    # RSqrt error target .5x2^-12
    'RSqrt',
    [4.0, 3.25, 2.875, 2.5, 2.125, 1.75, 1.5625, 1.375, 1.1875],
    [-3.625, -3.0625, -2.6875, -2.3125, -1.9375, -1.65625, -1.46875, -1.28125, -1.09375],
    [
      [0.015059173107147217, 0.022885143756866455, 0.031738460063934326, 0.046246469020843506, 0.07206279039382935, 0.10637164115905762, 0.14369332790374756, 0.2022857666015625, 0.3007010221481323],
      [-0.07273715734481812, -0.09342581033706665, -0.11369490623474121, -0.1425345540046692, -0.18605303764343262, -0.2348569631576538, -0.2813277244567871, -0.34545576572418213, -0.4383206367492676],
      [0.5252257585525513, 0.5714285969734192, 0.6099942922592163, 0.6575959324836731, 0.718421220779419, 0.7770286798477173, 0.8251370191574097, 0.8834522366523743, 0.9561828970909119],
    ]
  ),
]

def process(arr):
  arr = np.array(arr)
  arr *= (2 ** shift)
  arr = np.round(arr).astype(int)
  return arr

outfilename = 'autogen/piecewise.ezpc'
outfile = open(outfilename, 'w')

for func in functions:
  segmentMaxs = process(func[1])
  segmentDeltas = process(func[2])
  segmentCoeffs = process(func[3])
  combined = np.row_stack((segmentMaxs, segmentDeltas, segmentCoeffs))
  dataPerSeg, numSegments = combined.shape
  outfile.write('int32 {name}NumSeg = {nSeg};\n'.format(name = func[0], nSeg = numSegments))
  outfile.write('def void Fill{name}SegData(int64_pl[5][{name}NumSeg] D) {{\n'.format(name = func[0]))
  fillTemplate = 'D[{row}][{col}]={val}L;'
  for row in range(dataPerSeg):
    for col in range(numSegments):
      outfile.write(fillTemplate.format(row = row, col = col, val = combined[row, col]))
    outfile.write('\n')
  outfile.write('}\n')

outfile.close()
